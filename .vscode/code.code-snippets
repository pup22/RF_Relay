{
	// Place your Рабочая область RF_Relay snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Serial": {
		"scope": "c, cpp",
		"prefix": "Sp",
		"body": [
			// "console.log('$1');",
			// "$2"
			"#ifdef DEBUG",
			"\tSerial.println($1); // комментарий",
			"#endif"
		],
		"description": "Serial.println DEBUG"
	}
}
// ISR(TIMER1_COMPA_vect)  //ISR(TIMER1_OVF_vect)
// {
//     digitalWrite(LED, !digitalRead(LED));
// }
// //******************** инициализация Timer1 ********************
// cli(); // отключить глобальные прерывания
// TCCR1A = 0; // установить TCCR1A регистр в 0
// TCCR1B = 0;
// // Установка битов CS10 и CS12 на коэффициент деления 1024
// TCCR1B |= (1 << CS10);
// TCCR1B |= (1 << CS12);
// OCR1A = 15624; // установка регистра совпадения
// TCCR1B |= (1 << WGM12); // включение в CTC режим
// //TIMSK1 = (1 << TOIE1);  // включить прерывание Timer1 overflow:
// TIMSK1 |= (1 << OCIE1A);  // включение прерываний по совпадению
// TCCR1B |= (1 << CS10);  // Установить CS10 бит так, чтобы таймер работал при тактовой частоте:
// sei();  // включить глобальные прерывания ********************